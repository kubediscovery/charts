apiVersion: v1
kind: ConfigMap
metadata:
  name: create-db-scripts
  labels:
    {{- include "job-database.labels" . | nindent 4 }}
  {{- with .Values.configMap.annotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
data:
  install_deps.sh: |
    #!/bin/sh

    set -e

    # Instala o cliente PostgreSQL e jq
    apk update
    apk add --no-cache postgresql-client jq

  create_dbs.sh: |
    #!/bin/sh

    set -e

    for db in $(echo $DATABASES | jq -c '.[]'); do
      DB_NAME=$(echo $db | jq -r '.name')
      DB_USER=$(echo $db | jq -r '.user')
      DB_PASSWORD_VAR=$(echo $db | jq -r '.nameKey | default .name' | tr '[:lower:]-' '[:upper:]_')_PASSWORD
      DB_PASSWORD=$(eval echo \$$DB_PASSWORD_VAR)
      DB_SCHEMA=$(echo $db | jq -r '.schema')

      psql --host="$PGHOST" --username="$PGUSER" --dbname=postgres -c "CREATE DATABASE $DB_NAME;" 2> /dev/null || true
      psql --host="$PGHOST" --username="$PGUSER" --dbname=postgres -c "CREATE USER $DB_USER WITH ENCRYPTED PASSWORD '$DB_PASSWORD';" 2> /dev/null || true
      psql --host="$PGHOST" --username="$PGUSER" --dbname=postgres -c "GRANT ALL PRIVILEGES ON DATABASE $DB_NAME TO $DB_USER;"
      psql --host="$PGHOST" --username="$PGUSER" --dbname="$DB_NAME" -c "CREATE SCHEMA $DB_SCHEMA AUTHORIZATION $DB_USER;"
      psql --host="$PGHOST" --username="$PGUSER" --dbname="$DB_NAME" -c "GRANT USAGE ON SCHEMA $DB_SCHEMA TO $DB_USER;"
      psql --host="$PGHOST" --username="$PGUSER" --dbname="$DB_NAME" -c "GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA $DB_SCHEMA TO $DB_USER;"
      psql --host="$PGHOST" --username="$PGUSER" --dbname="$DB_NAME" -c "GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA $DB_SCHEMA TO $DB_USER;"
    done